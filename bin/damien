#!/usr/bin/env node

const { fork } = require("child_process");
const { createInterface } = require("readline");
const watch = require("node-watch");

const { debounce } = require("../lib/debounce");

const FILE_WATCH_INTERVAL = 2000
const FILE_WATCH_FOLDER = process.cwd()

const terminal = createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
});

const hasHelp = process.argv.find(i => ["-h", "--help"].includes(i));

if (hasHelp) {
  console.log(
    `
    Usage: daemonize [NODE_JS_FILE]
    Relaunches NODE_JS_FILE on file changes.
  `.trim()
  );
  process.exit(0);
}

const [_node, _daemonize, filename, ...rest] = process.argv;

let fileWatcher;

function launchSubprocess() {
  // Clear console
  process.stdout.write("\033c");

  // Clear previous listeners
  process.stdin.removeAllListeners("keypress");
  fileWatcher && fileWatcher.close();

  // Launch process
  const subprocess = fork(filename, rest, { silent: false });

  // Watches for file changes and debounces the callback
  const debouncedListener = debounce((event, filename) => {
    if (event === "update" && filename) {
      subprocess.kill("SIGKILL");
      launchSubprocess();
    }
  }, FILE_WATCH_INTERVAL);
  fileWatcher = watch(FILE_WATCH_FOLDER, {recursive: true}, debouncedListener);

  // Handle subprocess exits
  subprocess.on("exit", (code, signal) => {
    if (code === 0) {
      console.log("> Clean exit");
      console.log("> Enter 'rs' to restart");

      terminal.removeAllListeners("line");
      terminal.on("line", line => {
        if (line.includes("rs")) {
          launchSubprocess();
        }
      });
    } else if (signal !== 'SIGKILL') {
      console.log("> Waiting for changes to restart...");
    }

    subprocess.kill("SIGKILL");
  });
}

launchSubprocess();
